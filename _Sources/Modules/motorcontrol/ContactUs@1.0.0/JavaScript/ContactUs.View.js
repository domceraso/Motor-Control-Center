define('ContactUs.View', [
    'Backbone', 'Backbone.FormView', 'contact_us.tpl', 'GlobalViews.Message.View', 'jQuery', 'underscore'
], function(
    Backbone, BackboneFormView, contactUsTpl, MessageView, jQuery, _
) {
    'use strict';

    return Backbone.View.extend({

        // When the view is rendered, it is wrapped in a div and then the template is loaded into that div. If you like, you can attach attributes to that div.
        attributes: {
            'class': 'contactus'
        }

        // We use bindings so that inline (frontend) validation fires immediately after the user loses focus on a particular field. It's included in Backbone.FormView and uses the validation rules we set in our frontend model.
        ,
        bindings: {
            '[name="firstname"]': 'firstname',
            '[name="lastname"]': 'lastname',
            '[name="email"]': 'email',
            '[name="title"]': 'title',
            '[name="incomingmessage"]': 'incomingmessage'
        }

        // Attaches listeners to frontend actions using jQuery selectors. We normally use the saveForm function from Backbone.FormView, which is a generic 'submit' function for sending data. However, we want to add in our own functionality to this event, so we're writing our own.
        ,
        events: {
            'submit form': 'saveTheForm'
        }

        //Generates the breadcrumbs. Arguably not necessary in functionality that only has one level, but good for familiarity, I guess
        ,
        getBreadcrumbPages: function() {
            return [{
                text: _('Contact Us').translate(),
                href: '/contact-us'
            }]
        }

        // The main use of this is to make this view a Backbone.FormView, so that we can use its functionality.
        ,
        initialize: function(options) {
            this.options = options;
            this.application = options.application;

            BackboneFormView.add(this);
        }

        // Our custom saveForm function. First we remove any error messages that may have been generated by this function via previous calls. Then we create a promise out of the submission of the form via the saveForm method. With that we then have two callbacks: one for success and one for failure, which will generate messaging appropriate for what happened.
        ,
        saveTheForm: function(e) {
            jQuery('form .global-views-message').parent().remove();

            var self = this;
            var promise = BackboneFormView.saveForm.apply(this, arguments);

            e.preventDefault();

            return promise && promise.then(
                function(success) {
                    if (success.successMessage) {
                        self.showMessage(success.successMessage, 'success');
                    } else {
                        self.showMessage('An error occured, please try again', 'error')
                    }
                },
                function(fail) {
                    fail.preventDefault = true;

                    _.each(fail.responseJSON.errorMessage, function(message, field) {
                        self.showMessage(message, 'error', field);
                    });
                }
            );
        }

        // The function we use to actually generate the messages. It uses the global message view functionality, which is a simple of way of creating messages throughout the site, ensuring that they all look consistent. Depending on whether it is passed a field, it will generate the message either at that field's location, or simply at the bottom of the form.
        ,
        showMessage: function(message, type, field) {
            var messageView = new MessageView({
                message: message,
                type: type
            });

            if (typeof field !== 'undefined') {
                this.application.getLayout().$('[data-input="' + field + '"]').append(messageView.render().$el);
            } else {
                this.application.getLayout().$('form').append(messageView.render().$el);
            }
        }

        // Quite simply, the template we want to use.
        ,
        template: contactUsTpl

        // Set the page title
        ,
        title: _('Contact Us').translate()
    });
});